#+STARTUP: content
* .emacs.d

#+BEGIN_SRC sh :results silent
cd && git clone git@github.com:torgeir/.emacs.d.git
#+END_SRC

Load this file when emacs starts.

#+BEGIN_SRC emacs-lisp :results silent
(find-file (locate-user-emacs-file "readme.org"))
#+END_SRC

** os setup
*** shortcuts

#+BEGIN_SRC sh :results silent
ln -s ~/.emacs.d/emacsclient ~/bin/e
ln -s ~/.emacs.d/emacsclient-terminal ~/bin/em
#+END_SRC

*** deps

#+BEGIN_SRC sh :results silent
npm install eslint babel-eslint jsonlint eslint-plugin-react typescript-language-server typescript jscodeshift browser-sync
#+END_SRC

*** os x

#+BEGIN_SRC sh :results silent
brew tap d12frosted/emacs-plus
brew install emacs-plus --HEAD --with-natural-title-bar --without-spacemacs-icon
#+END_SRC

*** ubuntu

#+BEGIN_SRC sh :results silent
sudo add-apt-repository -y ppa:ubuntu-elisp
sudo apt update
sudo apt install emacs-snapshot
sudo apt install fonts-inconsolata
sudo fc-cache -fv
#+END_SRC

** sanity

Remove the startup message.

#+BEGIN_SRC emacs-lisp :results silent
(setq inhibit-startup-message t)
#+END_SRC

Make shift work i org-mode.

#+BEGIN_SRC emacs-lisp :results silent
(setq org-support-shift-select t)
#+END_SRC

** bootstrap

Default to calling straigth-use-package when running use-package.

#+BEGIN_SRC emacs-lisp :results silent
;;; -*- lexical-binding: t; -*-
(setq straight-use-package-by-default t)
#+END_SRC

Bootstrap [straight.el](https://github.com/raxod502/straight.el).

#+BEGIN_SRC emacs-lisp :results silent
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(defconst t-leader "SPC")
(defconst t-emacs-leader "C-")
(defconst t-font-size 17)

(defconst is-mac (equal system-type 'darwin))
(defconst is-cygwin (equal system-type 'cygwin))
(defconst is-linux (equal system-type 'gnu/linux))
(defconst is-win (equal system-type 'windows-nt))
(defconst is-ms (or is-cygwin is-win))
(defconst has-gui (display-graphic-p))

(defvar *t-indent* 2)
(defvar *t-indent-xml* 4)
(defvar *t-debug-init* nil "Debug/time startup")
(when *t-debug-init* (setq debug-on-error nil))

(defconst user-emacs-directory "~/.emacs.d/")
(defun t/user-emacs-file (path) (concat user-emacs-directory path))
(defun t/user-file (path)
  (concat (if is-mac "/Users/"
            (if is-linux "/home/"
              "c:/Users/"))
          (if is-win
              "torgth"
            (replace-regexp-in-string "\\." "" (getenv "USER")))
          "/"
          path))

(defconst t-dir-setup (t/user-emacs-file "setup"))
(defconst t-dir-snippets (t/user-emacs-file "snippets"))
(defconst t-file-autoloads (t/user-emacs-file "setup/autoloads.el"))

(add-to-list 'load-path t-dir-setup)
(add-to-list 'load-path (t/user-emacs-file "setup/langs"))
(let ((dir-site-lisp (t/user-emacs-file "site-lisp")))
  (add-to-list 'load-path dir-site-lisp)
  ;; add folders inside site-lisp as well
  (dolist (project (directory-files dir-site-lisp t "\\w+"))
    (when (file-directory-p project)
      (add-to-list 'load-path project))))

(defun t/timing-start ()
  (interactive)
  (when *t-debug-init*
    (message "t: timing init")
    (require 't-debug)

    ;; benchmarks
    (use-package benchmark-init :config (benchmark-init/activate))))

(defun t/timing-end ()
  (interactive)
  (when *t-debug-init*
    (message "t: timing init complete")
    (benchmark-init/show-durations-tabulated)
    (benchmark-init/show-durations-tree)))

(defun t/reload-autoloads ()
  "Regenerate and reload autoloads.el."
  (interactive)
  (let ((generated-autoload-file t-file-autoloads))
    (update-directory-autoloads (concat t-dir-setup "/"))
    (when (called-interactively-p 'interactive) (load t-file-autoloads t t))))

(unless (require 'autoloads t-file-autoloads t)
  (t/reload-autoloads)
  (unless (require 'autoloads t-file-autoloads t) (error "autoloads.el not generated!")))

(load (t/user-emacs-file "t-before.el") t)
#+END_SRC

Install [use-package](https://github.com/jwiegley/use-package).

#+BEGIN_SRC emacs-lisp :results silent
(straight-use-package 'use-package)
(eval-when-compile (require 'use-package))
#+END_SRC


#+BEGIN_SRC emacs-lisp :results silent
(use-package diminish)
(require 'bind-key)
(use-package dash) ; list helpers
(use-package dash-functional) ; fun list helpers
(use-package s) ; string helpers
(use-package f) ; file helpers
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
;;(t/set-font (car t-fonts))
;;(t/transparency 100)
#+END_SRC

** customization

#+BEGIN_SRC emacs-lisp :results silent
(setq custom-file (locate-user-emacs-file "custom.el"))
(load custom-file)
#+END_SRC

** before
#+BEGIN_SRC emacs-lisp :results silent
(t/timing-start)
#+END_SRC

** macros
#+BEGIN_SRC emacs-lisp :results silent
(require 'subr-x)

(defmacro comment (&rest ignore)
  "Ignore stuff, return `nil'."
  nil)

(defmacro t/lambda (&optional args &rest body)
  (declare (indent 1))
  (if body
      `(lambda ,args (interactive) ,@body)
    `(lambda (&optional &rest ignore) (interactive) ,args)))

(comment
 (t/lambda)
 (t/lambda 1)
 (t/lambda (one two) 1))

(defmacro t/after (file-name &rest body)
  (declare (indent 1))
  (if (locate-library (symbol-name file-name))
      `(with-eval-after-load ',file-name ,@body)
    (message "t/after: for %s is not a filename in load-path?" file-name)))

(defmacro t/when-ext (ext &rest body)
  "Run `body' when buffer's file has extension `ext'."
  (declare (indent 1))
  `(let ((ext-re (concat "\\." ,ext "$")))
     (when (and (buffer-file-name)
                (string-match ext-re (buffer-file-name)))
       ,@body)))

(defun t/ensure-list (i-or-is)
  "Ensure `i-or-is' is a list."
  (if (and (listp i-or-is)
           (not (functionp i-or-is)) ; lambda
           )
      i-or-is
    (list i-or-is)))

(defmacro t/add-hook (hook-or-hooks fn-or-fns &optional append local)
  "Add one or more hook fns."
  (comment (dolist (hook (t/ensure-list (eval hook-or-hooks)))
             (unless (or (boundp hook) (listp hook))
               (message "%s is not a hook" hook))))
  `(let ((hooks (t/ensure-list ,hook-or-hooks))
         (fns (t/ensure-list ,fn-or-fns)))
     (dolist (hook hooks)
       (dolist (fn fns)
         (add-hook hook fn ,append ,local)))))

(defmacro t/remove-hook (hook-or-hooks fn-or-fns)
  "Remove one or more hook fns"
  `(let ((hooks (t/ensure-list ,hook-or-hooks))
         (fns (t/ensure-list ,fn-or-fns)))
     (dolist (hook hooks)
       (dolist (fn fns)
         (remove-hook hook fn)))))

(defmacro t/add-hook-setq (hook-or-hooks var_ val_ &rest vars_)
  "A `setq' run in hooks."
  `(t/add-hook ,hook-or-hooks
               (lambda nil
                 (let ((var (quote ,var_))
                       (val (quote ,val_))
                       (vars (quote ,vars_))
                       (bindings '(setq)))
                   (while var
                     (setq bindings (cons val (cons var bindings))
                           var (and vars (pop vars))
                           val (and vars (pop vars))))
                   (eval (nreverse (copy-list bindings)))))))

(defmacro t/bind-in (maps_ key_ fn_ &rest bindings)
  "Bind keys in maps."
  (declare (indent 1))
  `(let ((maps (t/ensure-list ,maps_))
         (key (quote ,key_))
         (fn (quote ,fn_))
         (bs (quote ,bindings)))
     (while key
       (dolist (map maps)
         (eval `(bind-key ,key ,fn ,map)))
       (setq key (and bs (pop bs))
             fn (and bs (pop bs))))))

(defmacro t/add-hook-defun (hook-or-hooks fn &rest body)
  "Create a defun `fn' with `body' in `hook-or-hooks'."
  `(progn
     (defun ,fn ()
       (interactive)
       ;; TODO
       ;;(unless (helm-window)
       ,@body)
     ;;TODO)
     (t/add-hook ,hook-or-hooks (quote ,fn))))

(defmacro t/macro-helm-ag-insert (thing fn)
  `(lambda ()
     (interactive)
     ;; TODO
     ;;(setq-local helm-ag-insert-at-point ,thing)
     (,fn)
     ;; TODO
     ;;(setq-local helm-ag-insert-at-point nil)
     ))

(defmacro t/idle-timer (name fn every-minute)
  "Reloadable variant of run-with-idle-timer."
  `(progn
     (when (and (boundp ',name) ,name) (cancel-timer ,name))
     (setq ,name (run-with-idle-timer (* ,every-minute 60) t ,fn))))

(defmacro t/safe-call (fn)
  "Expands to call `fn' only if it is bound to a function."
  `(when (fboundp (quote ,fn))
     (funcall (quote ,fn))))

(progn

  (defvar t-use-package-pkgs nil
    "List of all packages inited by t/use-package that will be used
for setting up vars and config after load")
  (setq t-use-package-pkgs nil)

  (defmacro t/use-package (package &optional key value &rest bindings)
    (declare (indent 1))
    (let* ((entries '())
           (init-name (intern (format "t/init-%s" package)))
           (vars-name (intern (format "t/vars-%s" package)))
           (config-name (intern (format "t/config-%s" package))))

      (while key
        (push value entries)
        (push key entries)
        (setq key (pop bindings)
              value (pop bindings)))

      (let* ((init-body (plist-get entries :init))
             (config-body (plist-get entries :config))
             (body '()))

        ;; make :init and :config call defuns instead
        (setq entries (plist-put entries :init `(,vars-name)))
        (setq entries (plist-put entries :config `(,config-name)))

        ;; pass through some other use-package keys
        (let ((ks (list :if :init :config :mode :bind :ensure :diminish :after
                        :hook :commands :defer :load-path :pin :evil-state)))
          (dolist (k ks)
            (when (plist-member entries k)
              (let ((v (plist-get entries k)))
                (setq body (plist-put body k v))))))

        (add-to-list 't-use-package-pkgs init-name t)
        (setq t-use-package-pkgs (delete-dups t-use-package-pkgs))

        `(progn
           (defun ,vars-name ()
             (interactive)
             (when *t-debug-init*
               (message "t/use-package vars: %s" (symbol-name ',vars-name)))
             ,init-body)
           (defun ,config-name ()
             (interactive)
             (when *t-debug-init*
               (message "t/use-package config: %s" (symbol-name ',config-name)))
             ,config-body)
           (defun ,init-name ()
             (interactive)
             (when *t-debug-init*
               (message "t/use-package init: %s" (symbol-name ',init-name)))
             (use-package ,package ,@body)))))))

;; tests

(comment
 (plist-member '(:one nil :two 2) :one)
 (plist-member '(:one nil :two 2) :ensure)

 (pp (macroexpand-1 '(t/use-package wow
                       :ensure nil
                       :commands (winner-mode)
                       :bind (:map winner-mode-map ("C-c <left>" . winner-undo)))))
 )

(comment

 (t/use-package winner
   :bind (:map winner-mode-map ("C-c <left>" . winner-undo))
   :init (message "init")
   :config (message "config"))

 t-use-package-pkgs

 (symbol-function 't/vars-winner)
 (symbol-function 't/config-winner)
 (symbol-function 't/init-winner))

(comment
 (delete-dups '(1 2 3 1 2 3)))

(comment
 (t/use-package whaat
   :config
   (progn
     (message "config what one")
     (message "config what two"))
   :bind (+ 1 2))

 (symbol-function 't/vars-whaat)
 (symbol-function 't/config-whaat)
 (symbol-function 't/init-whaat))

(comment
 (symbol-function 't/config-which-key))

(defmacro t/def-pairs (pairs)
  "Create smartsmartparens wrapping function, e.g. t/wrap-with-paren"
  `(progn
     ,@(loop for (key . val) in pairs
             collect
             `(defun ,(read (concat
                             "t/wrap-with-"
                             (prin1-to-string key)
                             "s"))
                  (&optional arg)
                (interactive "p")
                (sp-wrap-with-pair ,val)))))

#+END_SRC

** os specific
*** mac
#+BEGIN_SRC emacs-lisp :results silent
(when is-mac

  (progn

    ;; intentionally not t/use-package, to make sure it happens at once
    (use-package exec-path-from-shell :config (exec-path-from-shell-initialize))

    ;; mouse
    (setq ns-use-mwheel-momentum t
          ns-use-mwheel-acceleration t

          ;; for some reason makes ci{[ work on os x
          ;; with evil-surround with a norwegian keyboard..
          mac-right-option-modifier nil

          ;; bind fn to H-
          ns-function-modifier 'hyper

          shell-file-name "/bin/sh" ; cause zsh makes projectile unable to find the git repo

          trash-directory "~/.Trash/emacs")

    ;; dark title bar
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))

    (t/bind-in 'key-translation-map
      ;; translate norwegian os x keybindings
      "M-7" "|"
      "M-/" "\\"
      "M-8" "["
      "M-9" "]"
      "M-(" "{"
      "M-)" "}")

    (t/bind-in 'global-map
      ;; s-p print dialog kills emacs, so disable it..
      "s-p" nil
      ;; don't pop up font menu, makes new tab work in iterm2
      "s-t" nil)

    ;; make this run also after connecting with emacsclient
    ;; https://groups.google.com/forum/#!topic/gnu.emacs.help/ZGu2MNkJGrI
    (defadvice terminal-init-xterm (after map-S-up-escape-sequence activate)
      (t/bind-in 'input-decode-map
        ;; fix terminal shortcomings, remap them in iterm2, and bring tem back here
        ;; unused keys are e.g. above f17 which is ^[[15;2~ in emacs that is \e[15;2\~
        ;; http://aperiodic.net/phil/archives/Geekery/term-function-keys.html
        "\e[15;2\~" "C-SPC"
        "\e[17;2\~" "C-M-SPC"
        "\e[18;2\~" "C-."
        "\e[19;2\~" "C-,"
        ;; c-æ on a norwegian mac keyboard IS the ansi escape character ^[
        ;; for debugging run: (read-key-sequence "?")
        "\e[20;2\~" "C-æ"
        ;; c-ø on a norwegian mac keyboard is ^\
        "C-\\" "C-ø"
        ;; c-å on a norwegian mac keyboard is ^]
        "C-]" "C-å"
        ;; skip \e21;2~, its f10? what
        "\e[22;2\~" "C-'")))
  )
#+END_SRC

*** linux
#+BEGIN_SRC emacs-lisp :results silent
(when is-linux
  (progn
    (setq t-font-size 14
          shell-file-name "/bin/zsh")

    ;; intentionally not t/use-package, to make sure it happens at once
    (use-package exec-path-from-shell :config (exec-path-from-shell-initialize))

    (t/bind-in 'key-translation-map
      ;; translate norwegian os x keybindings
      "M-7" "|"
      "M-/" "\\"
      "M-8" "["
      "M-9" "]"
      "M-(" "{"
      "M-)" "}")

    ;; os x window movement
    (t/bind-in 'global-map
      "s-k" 'previous-buffer
      "s-j" 'next-buffer
      "s->" 'next-multiframe-window
      "s-<" 'previous-multiframe-window
      "s-<left>" 't/smart-beginning-of-line
      "s-<right>" 'end-of-line
      "M-s-<up>" 'windmove-up
      "M-s-<right>" 'windmove-right
      "M-s-<down>" 'windmove-down
      "M-s-<left>" 'windmove-left
      "s-d" 't/split-window-right-and-move-there-dammit
      "s-D" 't/split-window-below-and-move-there-dammit

      "s-c" 'evil-yank
      "s-v" 'evil-paste-after
      "s-z" 'undo-tree-undo
      "s-s" 'save-buffer
      "s-a" 'mark-whole-buffer
      "s-w" 'delete-frame
      "s-n" 'make-frame

      ;; s-w quits like C-x C-w
      "s-w" #'t/delete-frame-or-hide-last-remaining-frame
      "s-q" 'restart-emacs

      ;; buffer font size adjustment
      "s-?" (t/lambda (text-scale-increase 1))
      "s-_" (t/lambda (text-scale-decrease 1))
      "s-=" (t/lambda (text-scale-set 0))

      ;; global font size adjustment
      "s-+" 't/increase-font-size
      "s--" 't/decrease-font-size
      "s-0" 't/reset-font-size)))
#+END_SRC

*** ms
#+BEGIN_SRC emacs-lisp :results silent
(when is-ms
  (progn
    (setq t-font-size 12
          shell-file-name "C:/Program Files/Git/bin/bash.exe")

    (t/bind-in 'global-map
      "C-+" 't/increase-font-size
      "C--" 't/decrease-font-size
      "C-0" 't/reset-font-size)

    (defun make-auto-save-file-name ()
      "torgeir: copied this from ftp://ftp.gnu.org/old-gnu/emacs/windows/docs/faq8.html. Fixes an issue when in gui emacs on windows it cant save backup files.

  Return file name to use for auto-saves of current buffer.
Does not consider `auto-save-visited-file-name' as that variable is checked
before calling this function.  This version stores all auto-save files in the
same local directory. This is to avoid trying to save files over a dial-up
connection (which may not be active).  See also `auto-save-file-name-p'."
      (if buffer-file-name
          (if (and (eq system-type 'ms-dos)
                   (not (msdos-long-file-names)))
              (let ((fn (file-name-nondirectory buffer-file-name)))
                (string-match "\\`\\([^.]+\\)\\(\\.\\(..?\\)?.?\\|\\)\\'" fn)
                (concat (expand-file-name "~/save/")
                        "#" (match-string 1 fn)
                        "." (match-string 3 fn) "#"))
            (concat (expand-file-name "~/.save/")
                    "#"
                    (file-name-nondirectory buffer-file-name)
                    "#"
                    (make-temp-name "")))

        ;; Deal with buffers that don't have any associated files.  (Mail
        ;; mode tends to create a good number of these.)

        (let ((buf-name (buffer-name))
              (limit 0))

          ;; Use technique from Sebastian Kremer's auto-save
          ;; package to turn slashes into \\!.  This ensures that
          ;; the auto-save buffer name is unique.

          (while (string-match "[/\\*?':]" buf-name limit)
            (message "%s" buf-name)
            (setq buf-name (concat (substring buf-name 0 (match-beginning 0))
                                   (if (string= (substring buf-name
                                                           (match-beginning 0)
                                                           (match-end 0))
                                                "/")
                                       "\\!"
                                     (if (string= (substring buf-name
                                                             (match-beginning 0)
                                                             (match-end 0))
                                                  "\\\\")
                                         "\\\\" "__"))
                                   (substring buf-name (match-end 0))))
            (setq limit (1+ (match-end 0))))

          (expand-file-name
           (format "~/.save/#%s#%s#" buf-name (make-temp-name "")))))))
  )
#+END_SRC

** sane defaults

#+BEGIN_SRC emacs-lisp :results silent
(use-package all-the-icons) ; pretty icons

(use-package better-defaults) ; rid the insanity

;; utf-8 ffs
(setq locale-coding-system 'utf-8
      default-buffer-file-coding-system 'utf-8)

(add-to-list 'file-coding-system-alist '("\\.org" . utf-8))
(prefer-coding-system 'utf-8)

(setq-default
 word-wrap t
 delete-by-moving-to-trash t
 mode-require-final-newline nil ; don't require final newline
 require-final-newline nil ; don't require final newline
 redisplay-dont-pause t ; update screen immediately
 x-underline-at-descent-line t ; draw underline lower
 help-window-select 't ; focus help buffers
 visible-bell t ; visible bell
 ring-bell-function 'ignore ; no bell
 compilation-scroll-output 'first-error ; scroll compilation to first error
 window-combination-resize t ; resize proportionally
 initial-major-mode 'emacs-lisp-mode ; load *scratch* in text-mode
 initial-scratch-message nil ; clear *scratch* buffer
 echo-keystrokes 0.001 ; show keystrokes
 save-interprogram-paste-before-kill t ; clipboard contents into kill-ring before replace
 font-lock-maximum-decoration t ; gaudiest possible look
 truncate-partial-width-windows nil ; don't truncate lines
 indicate-empty-lines nil ; don't show empty lines after buffer
 indicate-buffer-boundaries nil ; don't show buffer start/end
 fringes-outside-margins t       ; switches order of fringe and margin
 frame-title-format "%b (%f)"; full path in titlebar
 inhibit-startup-message t ; no splash
 sentence-end-double-space nil ; one space between sentences
 ad-redefinition-action 'accept ; silence useless warnings, e.g. ad-handle-definition: `find-tag-noselect' got redefined
 fill-column 80 ; chars per line

 gc-cons-threshold (* 8 1024 1024) ; more memory
 indent-tabs-mode nil ; don't use tabs
 tab-width 2 ; two spaces
 cursor-in-non-selected-windows nil ; no cursor in other open windows
 eval-expression-print-length nil ; no length limit when printing sexps in message buffer
 eval-expression-print-level nil ; no level limit when printing sexps in message buffer
 frame-resize-pixelwise t)

;;open large files remove heavy modes
(global-so-long-mode 1)

;; y or n will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; dont blink cursor
(blink-cursor-mode -1)

;; remove menus
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1))

;; show active region
(transient-mark-mode 0)
(make-variable-buffer-local 'transient-mark-mode)
(put 'transient-mark-mode 'permanent-local t)
(setq-default transient-mark-mode t)

;; show parens
(show-paren-mode t)
(setq show-paren-delay 0)

;; remove selected text when typing
(delete-selection-mode t)

;; above what sizes can the window split
(setq split-height-threshold 0
      split-width-threshold 0
      split-window-preferred-function #'t/split-window-sensibly)

;; remember file positions, and layout
(save-place-mode 1)

;; (desktop-save-mode 1)
(setq desktop-save 't)

;; eldoc everywhere
;; TODO
;;(global-eldoc-mode)

;; temp files in..
(setq backup-directory-alist `((".*" . ,(locate-user-emacs-file ".backups/")))
      auto-save-file-name-transforms `((".*" ,(locate-user-emacs-file ".auto-save-list/") t))
      auto-save-list-file-prefix (locate-user-emacs-file ".auto-save-list/")
      recentf-save-file (locate-user-emacs-file ".recentf")
      save-place-file (locate-user-emacs-file ".places")
      save-place-forget-unreadable-files nil
      create-lockfiles nil
      ido-save-directory-list-file (locate-user-emacs-file ".ido.last"))

;; mouse, with scroll
(xterm-mouse-mode t)
(defun trackp-mouse (e))
(setq mouse-sel-mode t)

(when (require 'mwheel nil 'noerror)
  (global-set-key [wheel-down] (t/lambda (scroll-down 2)))
  (global-set-key [wheel-up] (t/lambda (scroll-up 2)))
  (global-set-key [mouse-4] (t/lambda (scroll-down 2)))
  (global-set-key [mouse-5] (t/lambda (scroll-up 2)))
  (mouse-wheel-mode t))

(use-package popwin
  :defer 1
  :init
  (progn
    (setq popwin:popup-window-height 25))
  :config
  (popwin-mode 1)
  (add-to-list 'popwin:special-display-config "*xref*")
  (add-to-list 'popwin:special-display-config '("*cider-doc*" :noselect t)))

#+END_SRC

** evil

#+BEGIN_SRC emacs-lisp :results silent
    ;;; -*- lexical-binding: t; -*-
(setq evil-want-C-d-scroll t
      evil-want-C-u-scroll t
      evil-want-keybinding nil
      evil-want-integration t
      evil-want-Y-yank-to-eol nil
      evil-move-beyond-eol nil)

(setq evil-default-state 'normal
      evil-insert-skip-empty-lines t
      evil-search-module 'evil-search)


(use-package evil
  :init
  (progn
    ;; https://emacs.stackexchange.com/a/15054
    (fset 'evil-visual-update-x-selection 'ignore)))

(use-package evil-anzu
  :init
  (progn
    (setq anzu-cons-mode-line-p nil
          anzu-minimum-input-length 1
          anzu-search-threshold 100)))

(use-package evil-escape
  :after evil
  :init
  (progn
    (setq-default evil-escape-key-sequence "jk"
                  evil-escape-delay 0.1))
  :config
  (evil-escape-mode))

(use-package evil-leader
  :after evil
  :init
  (progn
    (setq evil-leader/in-all-states t
          evil-leader/non-normal-prefix t-emacs-leader))
  :config
  (progn
    (evil-leader/set-leader t-leader)
    (t/bind-in '(evil-normal-state-map evil-motion-state-map)
      "Y" 't/evil-yank-to-end-of-line)))

(use-package evil-collection
  :after evil
  :init
  (progn
    (setq evil-collection-key-blacklist '("ZZ" "ZQ"))
    (evil-collection-init)
    (t/after org
      (evil-collection-define-key 'normal 'outline-mode-map (kbd "<tab>") 'org-cycle))
    (progn
      ;; https://github.com/jtbm37/all-the-icons-dired/pull/19
      (t/after evil-collection
        (defvar-local +wdired-icons-enabled nil)
        (defun +wdired-before-start-advice ()
          "Execute when switching from `dired' to `wdired'."
          (setq +wdired-icons-enabled (if (bound-and-true-p all-the-icons-dired-mode)
                                          1 0))
          (when (bound-and-true-p all-the-icons-dired-mode)
            (all-the-icons-dired-mode 0)))
        (defun +wdired-after-finish-advice ()
          "Execute when switching from `wdired' to `dired'"
          (when (boundp 'all-the-icons-dired-mode)
            (all-the-icons-dired-mode +wdired-icons-enabled)))
        (advice-add 'wdired-change-to-wdired-mode :before #'+wdired-before-start-advice)
        (advice-add 'wdired-change-to-dired-mode :after #'+wdired-after-finish-advice)))))

(use-package evil-matchit
  :commands evilmi-jump-items
  :config
  (progn
    (global-evil-matchit-mode 1)))

(use-package evil-visualstar
  :commands (evil-visualstar/begin-search-forward
             evil-visualstar/begin-search-backward)
  :config
  (progn
    (t/bind-in 'evil-visual-state-map
      "*" 'evil-visualstar/begin-search-forward
      "#" 'evil-visualstar/begin-search-backward)))

(use-package evil-cleverparens
  :diminish evil-cleverparens-mode
  :defer 1
  :init
  (progn
    (t/add-hook-defun
     'evil-cleverparens-enabled-hook t-evil-cp-mode-hook
     (evil-define-key 'visual evil-cleverparens-mode-map (kbd "M-d") 'evil-multiedit-match-symbol-and-next)
     (evil-define-key 'normal evil-cleverparens-mode-map (kbd "M-d") 'evil-multiedit-match-symbol-and-next))
    (setq evil-cleverparens-use-additional-bindings t
          evil-cleverparens-use-regular-insert t))
  :config
  (t/after evil-surround
    (add-to-list 'evil-surround-operator-alist '(evil-cp-delete . delete))
    (add-to-list 'evil-surround-operator-alist '(evil-cp-change . change))))

(use-package evil-surround
  :defer 1
  :config
  (progn
    (global-evil-surround-mode 1)
    ;; the opposite of vim, like spacemacs
    (evil-define-key 'visual evil-surround-mode-map "S" 'evil-substitute)
    (evil-define-key 'visual evil-surround-mode-map "s" 'evil-surround-region)))

(use-package evil-snipe
  :defer 1
  :init
  (t/add-hook-defun 'prog-mode-hook t-hook-snipe
                    (evil-snipe-local-mode 1)
                    (evil-snipe-override-local-mode 1)))

(use-package evil-multiedit
  :commands evil-multiedit-match-symbol-and-next
  :init
  (progn
    (setq evil-multiedit-follow-matches t)
    (t/bind-in 'evil-normal-state-map
      "M-d" 'evil-multiedit-match-symbol-and-next
      "C-M-r" 'evil-multiedit-restore))
  :config
  (progn
    (evil-multiedit-default-keybinds)
    (unbind-key "M-d" evil-insert-state-map)
    (unbind-key "C-M-D" evil-normal-state-map)
    (bind-key "gn" 'evil-multiedit--visual-line evil-multiedit-state-map)

    (progn
      (setq evil-multiedit-store-in-search-history t)

      (defun t/mc-skip-prev ()
        (interactive)
        (evil-multiedit-toggle-or-restrict-region)
        (evil-multiedit-match-and-prev))

      (defun t/mc-skip-next ()
        (interactive)
        (evil-multiedit-toggle-or-restrict-region)
        (evil-multiedit-match-and-next))

      (t/bind-in 'evil-multiedit-state-map
        "M-j" #'t/mc-skip-next
        "M-k" #'t/mc-skip-prev))))

(use-package evil-commentary
  :defer 1
  :init (evil-commentary-mode))

(use-package google-translate
  :commands google-translate-at-point)

(use-package evil-goggles
  :defer 1
  :init
  (progn
    (setq evil-goggles-duration 0.2
          evil-goggles-async-duration 0.2
          evil-goggles-pulse t))
  :config
  (t/add-hook-defun 'prog-mode-hook t/hook-goggles
                    (evil-goggles-mode)
                    (evil-goggles-use-magit-faces)))

;; dependencies of evil-extra-operator
(use-package highlight)
(use-package fold-this
  :after highlight)

(use-package evil-extra-operator
  :after fold-this
  :defer 1
  :init
  (setq evil-extra-operator-org-capture-key "gC")
  :config
  (global-evil-extra-operator-mode 1))

(defvar t-evil-major-modes '(compilation-mode
                             special-mode
                             calendar-mode
                             git-rebase-mode
                             diff-mode
                             gnus-group-mode
                             gnus-summary-mode)
  "Major modes that should trigger evil emacs state when changed to.")

(t/after evil
  (t/add-hook-defun 'after-change-major-mode-hook t/hook-major-mode
                    (when (member major-mode t-evil-major-modes)
                      (evil-emacs-state))))


(t/add-hook '(git-commit-mode-hook org-capture-mode-hook) 'evil-insert-state)

(defun t/init-evil-cursors (&rest _)
  "Change cursors after theme colors have loaded."
  (setq evil-default-cursor (face-background 'cursor nil t)
        evil-emacs-state-cursor  `(,(face-foreground 'warning) box)
        evil-normal-state-cursor 'box
        evil-insert-state-cursor 'bar
        evil-visual-state-cursor 'hollow))
(advice-add #'load-theme :after #'t/init-evil-cursors)

(defvar +evil-esc-hook '(t)
  "A hook run after ESC is pressed in normal mode (invoked by
    `evil-force-normal-state'). If a hook returns non-nil, all hooks after it are
    ignored.")

(defun +evil*attach-escape-hook (&optional ignore)
  "Run all `+evil-esc-hook' hooks. If any returns non-nil, stop there."
  (cond (;; quit the minibuffer if open.
         (minibuffer-window-active-p (minibuffer-window))
         (abort-recursive-edit))
        ;; disable ex search buffer highlights.
        ((evil-ex-hl-active-p 'evil-ex-search)
         (evil-ex-nohighlight))
        ;; escape anzu number of matches
        ((and (featurep 'anzu)
              anzu--state)
         (anzu--reset-status))
        ;; remove highlights
        ((and (featurep 'highlight-symbol)
              highlight-symbol-mode)
         (highlight-symbol-remove-all))
        ;; Run all escape hooks. If any returns non-nil, then stop there.
        (t (run-hook-with-args-until-success '+evil-esc-hook))))
(advice-add #'evil-force-normal-state :after #'+evil*attach-escape-hook)

;; motions keys for help buffers
(evil-define-key 'motion help-mode-map (kbd "q") 'quit-window)
(evil-define-key 'motion help-mode-map (kbd "<tab>") 'forward-button)
(evil-define-key 'motion help-mode-map (kbd "S-<tab>") 'backward-button)
(evil-define-key 'motion help-mode-map (kbd "L") 'help-go-forward)
(evil-define-key 'motion help-mode-map (kbd "H") 'help-go-back)
(evil-define-key 'motion help-mode-map (kbd "gf") 'help-go-forward)
(evil-define-key 'motion help-mode-map (kbd "gb") 'help-go-back)
(evil-define-key 'motion help-mode-map (kbd "gh") 'help-follow-symbol)

;; motion keys for info mode
(evil-define-key 'normal Info-mode-map (kbd "H") 'Info-history-back)
(evil-define-key 'normal Info-mode-map (kbd "L") 'Info-history-forward)
(unbind-key (kbd "h") Info-mode-map)
(unbind-key (kbd "l") Info-mode-map)

;; i_Ctrl-o - C-o from hybrid mode, like in vim insert mode
(evil-define-key 'hybrid global-map (kbd "C-o") 'evil-execute-in-normal-state)

;; some emacs stuff is useful, in terminals etc
;; http://stackoverflow.com/a/16226006
(t/bind-in '(evil-normal-state-map
             evil-insert-state-map
             evil-visual-state-map
             evil-motion-state-map)
  "C-a" 't/smart-beginning-of-line
  "C-e" 'end-of-line
  "C-b" 'evil-backward-char
  "C-f" 'evil-forward-char
  "C-k" 'kill-line
  "C-n" 'evil-next-line
  "C-p" 'evil-previous-line
  "C-w" 'evil-delete-backward-word
  ;; TODO bring back kill ring
  ;;"M-y" 'helm-show-kill-ring
  )

(t/bind-in 'evil-insert-state-map
  "C-d" 'evil-delete-char
  "C-u" (t/lambda (kill-line 0)))

(t/bind-in '(evil-normal-state-map
             evil-visual-state-map)
  "Q" 'call-last-kbd-macro
  "C-y" 'evil-paste-pop ; cycle after pasting with p
  "C-S-y" (t/lambda (evil-paste-pop-next 1)))

(bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-map)
(bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-ns-map)
(bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-completion-map)
(bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-must-match-map)
(bind-key [escape] 'minibuffer-keyboard-quit minibuffer-local-isearch-map)

;; macro camelCase to snakeCase
(evil-set-register ?c [?: ?s ?/ ?\\ ?\( ?\[ ?a ?- ?z ?0 ?- ?9 ?\] ?\\ ?\) ?\\ ?\( ?\[ ?A ?- ?Z ?0 ?- ?9 ?\] ?\\ ?\) ?/ ?\\ ?1 ?_ ?\\ ?l ?\\ ?2 ?/ ?g])

#+END_SRC

** which key

#+BEGIN_SRC emacs-lisp :results silent
(use-package which-key
  :diminish which-key-mode
  :init
  (progn
    (setq which-key-sort-order #'which-key-prefix-then-key-order
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 1
          which-key-special-keys nil
          which-key-side-window-max-height 0.5 ; percentage height
          which-key-separator " "
          which-key-idle-delay 0.4 ; time to wait before display
          which-key-allow-evil-operators t
          which-key-key-replacement-alist
          '(("<\\([[:alnum:]-]+\\)>" . "\\1")
            ("up"                    . "↑")
            ("right"                 . "→")
            ("down"                  . "↓")
            ("left"                  . "←")
            ("DEL"                   . "⌫")
            ("deletechar"            . "⌦")
            ("RET"                   . "⏎")))

    (defun t/prefix-with-leader (key)
      "Prefixes `key' with `leader' and a space, e.g. 'SPC m'"
      (concat t-leader " " key))

    (defun t/prefix-with-emacs-leader (key)
      "Prefixes `key' with emacs `leader' and a space, e.g. 'C-SPC m'"
      (concat t-emacs-leader t-leader " " key))

    (defun t/declare-prefix (prefix name &optional key fn &rest bindings)
      "Declares which-key `prefix' and a display `name' for the prefix.
       Sets up keybindings for the prefix."
      (t/after which-key
        (which-key-declare-prefixes (t/prefix-with-leader prefix) name)
        (which-key-declare-prefixes (t/prefix-with-emacs-leader prefix) name)
        (while key
          (evil-leader/set-key (concat prefix key) fn)
          (setq key (pop bindings)
                fn (pop bindings)))))

    (defun t/declare-prefix-for-mode (mode prefix name &optional key fn &rest bindings)
      "Declares which-key `prefix' and a display `name' for the prefix only in `mode`.
       Sets up keybindings for the prefix."
      (t/after which-key
        (which-key-declare-prefixes-for-mode mode (t/prefix-with-leader prefix) name)
        (which-key-declare-prefixes-for-mode mode (t/prefix-with-emacs-leader prefix) name)
        (while key
          (evil-leader/set-key-for-mode mode (concat prefix key) fn)
          (setq key (pop bindings)
                fn (pop bindings)))))

    (defun t/micro-state-in-mode (mode key fn &rest bindings)
      "Micro state that temporarily overlays a new key map, kinda like hydra"
      (lexical-let ((keymap (make-sparse-keymap)))
                   (while key
                     (bind-key key fn keymap)
                     (setq key (pop bindings)
                           fn (pop bindings)))
                   (lambda ()
                     (interactive)
                     (funcall mode)
                     (set-temporary-overlay-map keymap t (lambda nil
                                                           (funcall mode -1))))))
    (which-key-mode 1)))
#+END_SRC

*** evil leader + which key integration

#+BEGIN_SRC emacs-lisp :results silent
(t/declare-prefix "m" "Mode")
(evil-mode nil)
(global-evil-leader-mode)
(evil-mode 1)
#+END_SRC
** ivy

#+BEGIN_SRC emacs-lisp :results silent
(use-package counsel :init (ivy-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
(use-package counsel-projectile)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
(use-package counsel-etags
  :ensure t
  :bind (("C-]" . counsel-etags-find-tag-at-point))
  :init
  (t/add-hook 'prog-mode-hook
              (t/lambda
                  (add-hook 'after-save-hook
                            'counsel-etags-virtual-update-tags 'append 'local)))
  :config
  (setq counsel-etags-update-interval 60)
  (push "build" counsel-etags-ignore-directories)
  (push "target" counsel-etags-ignore-directories))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
(use-package counsel-web)
;; todo counsel-wiki?
#+END_SRC

** site lisp

#+BEGIN_SRC emacs-lisp :results silent
(use-package ox-gfm)

(use-package cloudformation-mode
  :ensure nil
  :straight nil
  :load-path "site-lisp/cloudformation-mode")

(use-package spotify
  :ensure nil
  :straight nil
  :load-path "site-lisp/spotify")

(use-package nxml-eldoc
  :ensure nil
  :straight nil
  :load-path "site-lisp/nxml-eldoc"
  :commands turn-on-nxml-eldoc
  :init
  (t/add-hook 'nxml-mode-hook 'turn-on-nxml-eldoc))

(use-package json-path-eldoc
  :ensure nil
  :straight nil
  :load-path "site-lisp/json-path-eldoc"
  :commands turn-on-json-path-eldoc
  :init
  (t/add-hook 'json-mode-hook 'turn-on-json-path-eldoc))

(use-package html2text
  ;; needed for helm-google
  :commands helm-google
  :ensure nil
  :straight nil
  :load-path "site-lisp/html2text")

(use-package sgml-mode
  :ensure nil
  :straight nil
  :commands html-mode
  :init
  (progn
    (t/add-hook-defun 'sgml-mode-hook t/hook-sgml
                      (set (make-local-variable 'sgml-basic-offset) *t-indent*))))

(use-package nxml-mode
  :ensure nil
  :straight nil
  :mode "\\.\\(xml\\|svg\\|rss\\|xsd\\|xslt\\|plist\\)$"
  :config
  ;; reindent after deleting tag with C-c DEL
  (defadvice sgml-delete-tag (after reindent activate)
    (indent-region (point-min) (point-max)))

  ;; nxml
  (setq nxml-child-indent *t-indent-xml*))

(use-package html
  :ensure nil
  :straight nil
  :mode ("\\.\\(html|htm\\)" . html-mode))
#+END_SRC

** calendar
#+BEGIN_SRC emacs-lisp :results silent
(t/after calendar
  ;; show week numbers in calendar
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil :height 1 :foreground "VioletRed1")

  (copy-face 'default 'calendar-iso-week-header-face)
  (set-face-attribute 'calendar-iso-week-header-face nil :height 0.5 :foreground "VioletRed4")

  (setq calendar-mark-holidays-flag t
        calendar-intermonth-header '(propertize " " 'font-lock-face 'calendar-iso-week-header-face)
        calendar-intermonth-text '(propertize (format "%2d" (car
                                                             (calendar-iso-from-absolute
                                                              (calendar-absolute-from-gregorian
                                                               (list month day year)))))
                                              'font-lock-face 'calendar-iso-week-face)))
#+END_SRC


** vc

#+BEGIN_SRC emacs-lisp :results silent
(use-package git-gutter+
  :diminish git-gutter+-mode
  :init
  (t/add-hook 'prog-mode-hook 'git-gutter+-mode)
  :config
  (progn
    (evil-add-command-properties #'git-gutter+-next-hunk :jump t)
    (evil-add-command-properties #'git-gutter+-previous-hunk :jump t)
    (setq git-gutter+-modified-sign "~"
          git-gutter+-added-sign "+"
          git-gutter+-deleted-sign "-"
          git-gutter+-separator-sign (if has-gui "" " "))))

(use-package git-gutter-fringe+
  :init
  (t/add-hook-defun 'git-gutter+-mode-hook t/hook-git-gutter+
                    (fringe-helper-define 'git-gutter-fr+-added '(top repeat) "XXX.....")
                    (fringe-helper-define 'git-gutter-fr+-deleted '(top repeat) "XXX.....")
                    (fringe-helper-define 'git-gutter-fr+-modified '(top repeat) "XXX.....")
                    (git-gutter+-enable-fringe-display-mode)))

(use-package helm-open-github
  :commands (helm-open-github-from-issues
             helm-open-github-from-commit
             helm-open-github-from-file
             helm-open-github-from-pull-requests))

(use-package git-link
  :commands git-link
  :init
  (setq git-link-open-in-browser t))

(use-package git-timemachine
  :commands git-timemachine-toggle
  :config
  (defadvice git-timemachine-mode (after toggle-evil activate)
    (when git-timemachine-mode
      (t/bind-in 'evil-normal-state-local-map
        "q" 'git-timemachine-quit
        "C-g" 'git-timemachine-quit
        "C-n" 'git-timemachine-show-next-revision
        "C-p" 'git-timemachine-show-previous-revision))))

(use-package gist
  :commands (gist-list
             gist-buffer
             gist-buffer-private
             gist-region
             gist-region-private))

(use-package magit
  :commands magit-status
  :init
  (progn
    (setq magit-pull-arguments nil
          magit-fetch-arguments '("--prune")
          magit-rebase-arguments '("--interactive")
          magit-log-arguments '("--graph" "--color" "--decorate" "-n256")
          magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
    (when is-mac
      (setq
       ;; fixes https://github.com/magit/ghub/issues/81 - dont use this on linux
       gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"

       ;; https://github.com/magit/ghub/issues/81 - https://github.com/magit/ghub/commit/785cbfd1d48559556f38e9be7c3ed9bc15af12eb
       ghub-use-workaround-for-emacs-bug 'force)))

  :config
  (progn
    (bind-key "q" #'magit-quit-session magit-status-mode-map)

    (t/add-hook 'magit-log-mode-hook 'visual-line-mode)
    (t/add-hook 'magit-diff-mode-hook 'visual-line-mode)

    (defadvice magit-blame-mode (after switch-to-emacs-mode activate)
      (if magit-blame-mode
          (evil-emacs-state 1)
        (evil-normal-state 1)))

    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (git-gutter+-refresh))))

(use-package forge
  :after magit)

(use-package browse-at-remote
  :init
  (setq browse-at-remote-add-line-number-if-no-region-selected nil))

(progn
  (t/declare-prefix "g" "Git"
                    "T" 'git-timemachine-toggle
                    "s" 'magit-status
                    "b" 'magit-blame
                    "d" 'magit-diff
                    "l" 'magit-log-current
                    "L" 'magit-log
                    "C" 'magit-commit-create
                    "c" #'t/clone)

  (t/declare-prefix "gh" "Hunk"
                    "n" 'git-gutter+-next-hunk
                    "N" 'git-gutter+-previous-hunk
                    "C" 'git-gutter+-stage-and-commit
                    "?" 'git-gutter+-show-hunk-inline-at-point
                    "=" 'git-gutter+-show-hunk
                    "r" 'git-gutter+-revert-hunks
                    "s" 'git-gutter+-stage-hunks
                    "cc" 'magit-commit-create
                    "ca" 'magit-commit-amend)

  (t/declare-prefix "go" "Open github"
                    ;; TODO if region active choose gob
                    "l" 'git-link
                    "b" 'browse-at-remote)

  (t/declare-prefix "gg" "Gist"
                    "l" 'gist-list
                    "b" 'gist-buffer
                    "B" 'gist-buffer-private
                    "r" 'gist-region
                    "R" 'gist-region-private))

#+END_SRC

** keys

#+BEGIN_SRC emacs-lisp :results silent
;; lisp-friendly
(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-expand-all-abbrevs
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol
        try-expand-list
        try-expand-line))

(comment
 (defun t/useful-buffer? (b)
   "Determine if a buffer is useful and you would like to jump to it."
   (let ((name (buffer-name b)))
     (and (not (get-buffer-window name nil)) ; not already visible in same frame
          (not (s-contains? "autoloads.el" name))
          (or (equal "*scratch*" name)
              (s-contains? "*eww" name)
              (s-contains? "*Org" name)
              (s-contains? "*eshell" name)
              (not (s-contains? "*" name))))))
 ;; skip non-useful buffers on next-buffer, prev-buffer, other-buffer
 (let ((entry-exists (assq 'buffer-predicate default-frame-alist)))
   (if entry-exists
       (setcdr entry-exists #'t/useful-buffer?)
     (push '(buffer-predicate . t/useful-buffer?) default-frame-alist))))


(t/bind-in 'minibuffer-local-map "C-w" 'backward-kill-word)
(t/bind-in 'global-map

  "s-k" 'previous-buffer
  "s-j" 'next-buffer

  "s->" 'next-multiframe-window
  "s-<" 'previous-multiframe-window

  "s-<left>" 't/smart-beginning-of-line
  "s-<right>" 'end-of-line

  "M-s-<up>" 'windmove-up
  "M-s-<right>" 'windmove-right
  "M-s-<down>" 'windmove-down
  "M-s-<left>" 'windmove-left

  "s-d" 't/split-window-right-and-move-there-dammit
  "s-D" 't/split-window-below-and-move-there-dammit

  ;; s-w quits like C-x C-w
  "s-w" #'t/delete-frame-or-hide-last-remaining-frame
  ;; TODO
  ;;"C-x C-c" #'t/delete-frame-or-hide-last-remaining-frame

  ;; buffer font size adjustment
  "s-?" (t/lambda (text-scale-increase 1))
  "s-_" (t/lambda (text-scale-decrease 1))
  "s-=" (t/lambda (text-scale-set 0))

  ;; global font size adjustment
  "s-+" 't/increase-font-size
  "s--" 't/decrease-font-size
  "s-0" 't/reset-font-size

  "<C-S-up>" 't/move-line-up
  "<C-S-down>" 't/move-line-down

  "M-p" 'backward-paragraph
  "M-n" 'forward-paragraph

  "C-c n" 't/cleanup-buffer-whitespace-and-indent
  "C-x C-k" 'kill-region

  "C-." 't/hippie-expand-no-case-fold
  "C-," 'company-complete
  "C-:" 't/hippie-expand-lines)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
(t/after re-builder (setq reb-re-syntax 'rx))
(t/add-hook 'text-mode-hook 'auto-fill-mode) ; wrap text in text modes
(t/add-hook 'text-mode-hook 'goto-address-prog-mode) ; navigate urls
(t/add-hook 'focus-out-hook #'garbage-collect) ; make it feel snappier
(t/add-hook 'before-save-hook #'delete-trailing-whitespace nil t)
(t/add-hook 'find-file 't/find-file-check-make-large-file-read-only-hook)
(setq large-file-warning-threshold (* 20 ; mb
                                      1024 1024))

(t/after cider-overlays
  ;; inline evaled results when in elisp using cider
  (autoload 'cider--make-result-overlay "cider-overlays")
  (defun endless/eval-overlay (value point)
    (cider--make-result-overlay (format "%S" value) :where point :duration 'command) value) ; preserve the return value
  (advice-add 'eval-region :around (lambda (f beg end &rest r) (endless/eval-overlay (apply f beg end r) end)))
  (advice-add 'eval-last-sexp :filter-return (lambda (r) (endless/eval-overlay r (point))))
  (advice-add 'eval-defun :filter-return (lambda (r) (endless/eval-overlay r (save-excursion (end-of-defun) (point))))))

;; TODO
;;(evil-leader/set-key "'" 't/eshell)
;;(evil-leader/set-key "<" 't/eshell)
;;(evil-leader/set-key "|" 't/eshell)

(evil-leader/set-key "TAB" 't/switch-to-previous-buffer)
(evil-leader/set-key "u" 'universal-argument)

(defvar t-regex-mode nil "reb-mode on or not")
(defun t/toggle-regex-mode ()
  (interactive)
  (if t-regex-mode (reb-quit) (re-builder))
  (setq t-regex-mode (not t-regex-mode)))

(t/add-hook 'ediff-keymap-setup-hook
            (t/lambda (define-key ediff-mode-map "d" 't/ediff-use-both)))

(t/declare-prefix "a" "Applications"
                  "B" 'w3m
                  "c" 'calendar
                  "b" #'t/browse-url-at-point
                  "C" 'calc-dispatch
                  "d" 'md4rd
                  "g" 'gnus
                  "h" 't/hackernews
                  "i" 't/open-in-intellij
                  "p" 'proced
                  "m" 'popwin:messages
                  "M" (t/lambda nil (switch-to-buffer "*Messages*") (end-of-buffer))
                  "n" (t/lambda (t/eww-readable "https://www.nrk.no/nyheter/" 't/clean-nrk-buffer))
                  "R" #'t/toggle-regex-mode
                  "se" 't/eshell
                  "st" 'ansi-term
                  "sT" 'term
                  "ss" 'shell
                  "S" 'suggest
                  "w" 'eww
                  "W" (t/lambda nil
                        (t/eww-readable "https://en.wikipedia.org/wiki/Special:Random")
                        (visual-line-mode -1)
                        (visual-line-mode 1)))

(t/declare-prefix "fe" "Editor")

(t/declare-prefix "fe" "Files"
                  "R" 't/config-reload
                  "i" 't/helm-files-emacs-init-files)

(t/declare-prefix "fep" "Packages"
                  "i" 'package-install
                  "r" 'package-refresh-contents
                  "l" 'paradox-list-packages
                  "R" 'package-reinstall
                  "U" 't/upgrade-packages)

(t/declare-prefix "t" "Toggle"
                  "D" 'toggle-debug-on-error
                  "f" 't/cycle-font
                  "dd" 'darkroom-mode
                  "dt" 'darkroom-tentative-mode
                  "F" 'toggle-frame-fullscreen
                  "t" 't/load-theme-cycle
                  "T" 't/transparency
                  "m" 'imenu-list-smart-toggle
                  "M" 'menu-bar-mode
                  "n" #'t/toggle-line-numbers
                  "r" 'nlinum-relative-toggle
                  "L" 'hl-line-mode
                  "l" 'visual-line-mode
                  "." 'whitespace-mode
                  "W" 'global-writeroom-mode
                  "w" 'writeroom-mode
                  "Cc" 'rainbow-mode
                  "Cd" 'rainbow-delimiters-mode)

(t/declare-prefix "b" "Buffers"
                  "S" 'save-some-buffers
                  "s" 't/switch-to-scratch-buffer
                  "d" 'kill-this-buffer
                  "t" 't/kill-other-buffers
                  "b" 'ivy-switch-buffer
                  "o" 't/switch-to-previous-buffer
                  "p" 'popwin:display-buffer
                  "n" 'next-buffer
                  "R" 'revert-buffer)

(t/declare-prefix "d" "Doc/Desktop"
                  "d" 'dash-at-point
                  "S" 'dash-at-point-with-docset
                  "s" #'t/desktop-save
                  "r" #'t/desktop-restore
                  "c" 'desktop-clear)

(t/declare-prefix "x" "Text manipulation"
                  "a" 'align-regexp
                  "k" 'ido-kill-buffer
                  "m"  'counsel-M-x
                  "x" 'smex-major-mode-commands
                  "ls" 't/sort-lines
                  "lu" 't/uniquify-lines)

(t/declare-prefix "xt" "Transpose"
                  "c" 'transpose-chars
                  "w" 'transpose-words
                  "l" 'transpose-lines
                  "f" 'transpose-frame
                  "s" 'transpose-sexps
                  "S" 'transpose-sentences
                  "p" 'transpose-paragraphs)

(t/declare-prefix "r" "Registers"
                  "r" 'evil-show-registers)

(t/declare-prefix "f" "Files/Frame"
                  "b" 'ivy-switch-buffer
                  "f" 'counsel-find-file
                  "l" 't/neotree-open-file
                  "L" 'neotree-hide
                  "j" 'dired-jump
                  "J" 'dired-jump-other-window
                  "d" 'delete-frame
                  "g" 'ffap
                  "o" 't/open-in-desktop
                  "r" 'counsel-recentf)

(t/declare-prefix "h" "Help"
                  "h" #'t/describe
                  "f" #'t/face-at-point
                  "F" 'counsel-faces
                  "C" 'counsel-colors-emacs
                  "a" 'counsel-apropos
                  "l" 'counsel-find-library
                  "i" 'counsel-info-lookup-symbol
                  ;; "I" 'helm-info
                  "r" 'ivy-resume
                  ;;"Db" 'ivy-descbinds
                  "dd" 'dash-at-point
                  "df" 'counsel-describe-function
                  "dF" 'counsel-describe-face
                  "dk" 'describe-key-briefly
                  "dK" 'describe-key
                  "dc" 'describe-char
                  "dm" 'describe-mode
                  "dM" 'describe-minor-mode
                  "ds" 'counsel-describe-symbol
                  "dt" 'describe-theme
                  "dp" 'describe-package
                  "dv" 'counsel-describe-variable)

(t/declare-prefix "e" "Errors"
                  "c" 'flycheck-clear
                  "p" 'flycheck-previous-error
                  "n" 'flycheck-next-error
                  "N" 'flycheck-previous-error
                  "l" 'flycheck-list-errors
                  "v" 'flycheck-verify-setup
                  "t" 'flycheck-mode)

(t/declare-prefix "w" "Windows"
                  "h" 'windmove-left
                  "j" 'windmove-down
                  "k" 'windmove-up
                  "l" 'windmove-right
                  "n" 'make-frame-command
                  "D" 't/delete-frame-or-hide-last-remaining-frame
                  "d" 'delete-window
                  "t" 'delete-other-windows
                  "o" 't/previous-window
                  "=" 'balance-windows-area
                  "-" 'evil-window-decrease-width
                  "+" 'evil-window-increase-width
                  "u" 'winner-undo
                  "R" 'winner-redo
                  "r" 'transpose-frame)

(t/declare-prefix "z" "Folding"
                  "z" 'hs-toggle-hiding
                  "f" 'hs-hide-block
                  "F" 'hs-hide-all
                  "r" 'hs-show-block
                  "R" 'hs-show-all)

(t/declare-prefix "j" "Jump to"
                  "f" 'find-function
                  "k" 'find-function-on-key
                  "p" (lambda (key)
                        (interactive "kPress keybinding to run in popup: ")
                        (popwin:display-buffer-1 (popwin:dummy-buffer))
                        (let ((keys (key-binding key)))
                          (funcall
                           (cond ((stringp keys) (symbol-function keys))
                                 (t keys)))))
                  "w" 'ace-window
                  "j" 'avy-goto-char-timer
                  "t" 'avy-goto-char-timer
                  "c" 'avy-goto-char
                  "C" 'avy-goto-char-2
                  "l" 'avy-goto-line
                  "L" 'avy-goto-char-in-line
                  "W" 'avy-goto-word-1)

(t/declare-prefix "ja" "Jump to above"
                  "l" 'avy-goto-line-above
                  "W" 'avy-goto-word-0-above
                  "w" 'avy-goto-word-1-above
                  "c" 'avy-goto-char-2-above
                  "s" 'avy-goto-symbol-1-above)

(t/declare-prefix "jb" "Jump to below"
                  "l" 'avy-goto-line-below
                  "w" 'avy-goto-word-1-below
                  "W" 'avy-goto-word-0-below
                  "c" 'avy-goto-char-2-below
                  "s" 'avy-goto-symbol-1-below)

(t/declare-prefix "h" "Highlight"

                  "H" (t/lambda (highlight-symbol (thing-at-point 'symbol)))
                  "n" 'highlight-symbol-next
                  "N" 'highlight-symbol-prev)

(t/declare-prefix "p" "Project"
                  "a" 'counsel-projectile-org-agenda
                  "b" 'counsel-projectile-switch-to-buffer
                  "c" 'counsel-projectile-switch-project
                  "d" 't/projectile-dired
                  "w" 't/projectile-desktop
                  "f" 'counsel-projectile-find-file
                  "F" 'counsel-projectile-find-file-dwim
                  "g" 't/projectile-magit-status
                  "G" 'projectile-regenerate-tags
                  "k" 'projectile-kill-buffers
                  "l" 't/neotree-open-file
                  "L" 'neotree-hide
                  "o" 't/open-in-desktop
                  "p" 't/projectile-visit-git-link-pulls
                  "r" 't/projectile-rg
                  "s" 't/projectile-ag
                  "R" 'projectile-replace
                  "S" 'projectile-save-project-buffers
                  "t" 'projectile-find-test-file)

(t/declare-prefix "s" "Search"
                  "I" 'counsel-semantic-or-imenu
                  "b" 'ivy-switch-buffer
                  "f" 'counsel-rg
                  "g" 'counsel-web-thing-at-point
                  "G" 'counsel-web-search
                  "m" 'counsel-imenu
                  "i" 'lsp-find-implementation
                  "r" 'lsp-find-references
                  "d" 'lsp-find-definition
                  "D" 'lsp-find-declaration
                  "a" 'counsel-projectile-ag
                  "p" 'counsel-projectile-rg
                  "s" 'swiper
                  "t" 'etags-select-find-tag-at-point
                  ;;"w" 'helm-wikipedia-suggest
                  )
#+END_SRC

** server

#+BEGIN_SRC emacs-lisp :results silent
(unless (fboundp 'server-running-p) (require 'server))
(unless (server-running-p) (server-mode))
#+END_SRC

** org

#+BEGIN_SRC emacs-lisp :results silent
(setq org-src-window-setup 'current-window ; edit code src blocks in current window
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil ; don't prompt on every code run
      org-export-babel-evaluate nil ; don't run stuff automatically on export
      org-edit-src-content-indentation 0)

(defconst lat-trh 63.427)
(defconst lon-trh 10.391)

(defconst t-user-dropbox-folder (if (or is-mac is-linux)
                                    (t/user-file "Dropbox")
                                  "c:/Users/torgth/Dropbox \(Personlig\)"))

(defun t/user-dropbox-folder (path) (concat t-user-dropbox-folder "/" path))
(defun t/org-directory (path) (concat org-directory "/" path))
(defun t/org-archive-done-tasks ()
  (interactive)
  (org-map-entries (lambda ()
                     (org-archive-subtree)
                     (setq org-map-continue-from (outline-previous-heading)))
                   "/DONE" 'file)
  (org-map-entries (lambda ()
                     (org-archive-subtree)
                     (setq org-map-continue-from (outline-previous-heading)))
                   "/CANCELLED" 'file))

(setq org-directory (t/user-dropbox-folder "org"))
(setq org-mobile-directory (t/user-dropbox-folder "Apps/MobileOrg")
      org-mobile-inbox-for-pull (t/org-directory "inbox.org"))

(comment (defun org-set-local (var val)
           "Seems to have been renamed? Fix missing defun https://lists.gnu.org/archive/html/emacs-orgmode/2016-02/msg00122.html."
           (setq-local var val)))

(setq ;;org-ellipsis " >"
 org-startup-indented t        ; turn on org-indent-mode
 org-return-follows-link t
 org-tab-follows-link nil
 org-hide-leading-stars t
 org-hide-emphasis-markers nil
 org-loop-over-headlines-in-active-region 'start-level ; org-archive with friends work on multiple items
 org-blank-before-new-entry '((heading . auto) (plain-list-item . t)) ; newlines
 org-cycle-separator-lines 2 ; number of empty lines after heading needed to show visible newline between headings
 org-catch-invisible-edits 'show ; show invisibles on edit
 org-enforce-todo-dependencies t ; block parent TODOs if child is not completed
 org-refile-targets '((nil :maxlevel . 2)
                      (org-agenda-files :maxlevel . 2))
 org-refile-use-outline-path 'file ; enable refile to top level in file too
 org-outline-path-complete-in-steps nil ; refile to subpaths
 org-tags-column -60           ; tag position after headings
 org-export-coding-system 'utf-8
 org-default-notes-file (t/org-directory "home.org")
 org-special-ctrl-k t         ; don't clear tags, etc
 org-adapt-indentation t      ; move text to align with heading bullets

 ;; doom theme
 org-fontify-whole-heading-line t
 org-fontify-done-headline t
 org-fontify-quote-and-verse-blocks t
 org-fontify-emphasized-text t

 org-reverse-note-order t      ; newest notes first
 org-log-done 'time            ; log when todos are completed
 org-log-redeadline 'time      ; log when deadline changes
 org-log-reschedule 'time      ; log when schedule changes
 org-use-fast-todo-selection t
 org-todo-keywords '((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)" "CANCELLED(c)")))

(setq org-src-window-setup 'current-window ; edit code src blocks in current window
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil ; don't prompt on every code run
      org-export-babel-evaluate nil ; don't run stuff automatically on export
      org-edit-src-content-indentation 0)

(setq org-html-postamble t
      org-html-postamble-format
      '(("en" "<p class=\"author\">%a (%e)</p>\n<p class=\"date\">%T</p>")))

(defun t/org-capture-chrome-link-template (&optional &rest args)
  (concat "* TODO %? :url:%^G\n\n" (t/grab-chrome-url)))

(defun t/org-capture-elfeed-link-template (&optional &rest args)
  (concat "* TODO %? :url:%^G\n\n%i\n" (elfeed-entry-link elfeed-show-entry)))

(setq org-capture-templates
      `(("t" "Task" entry (file+olp org-default-notes-file "Home" "Tasks") "* TODO %? %^G\n\n%i\n\n" :prepend t)
        ("s" "Saga" entry (file+olp ,(t/org-directory "bekk/saga.org") "Saga" "Tasks") "* TODO %? \n\n%i\n\n" :prepend t)
        ("d" "Shared calendar event" entry (file ,(t/org-directory "gcal/delt.org")) "* %?\n")
        ("f" "File location" entry (file+olp org-default-notes-file "Home" "Tasks") "* TODO %? %^G\n\n%i%a\n\n")
        ("e" "Elfeed location" entry (file+olp org-default-notes-file "Home" "Tasks") (function t/org-capture-elfeed-link-template))
        ("c" "Chrome location" entry (file+olp org-default-notes-file "Home" "Tasks") (function t/org-capture-chrome-link-template))))

;; org-mobile
(t/use-package request-deferred :after org)

(t/use-package org
  :ensure org-plus-contrib
  :commands (org-mode)
  :mode ("\\.\\(org\\|org_archive\\)$" . org-mode)
  :init
  (progn
    (t/after org-agenda
      (bind-key "s-s" 'org-save-all-org-buffers org-agenda-mode-map)
      (unbind-key "C-," org-mode-map)) ;; don't need to cycle agenda files

    (evil-add-command-properties #'outline-up-heading :jump t)
    (evil-add-command-properties #'outline-next-heading :jump t)
    (evil-add-command-properties #'outline-previous-heading :jump t)
    (evil-add-command-properties #'org-previous-visible-heading :jump t)
    (evil-add-command-properties #'org-next-visible-heading :jump t)

    (t/declare-prefix "o" "Org"
                      "c" 'org-capture
                      "e" 'org-export-dispatch
                      "g" 'org-mac-grab-link
                      "a" 'org-agenda
                      "A" 't/org-archive-done-tasks
                      "n" 'org-alert-check
                      "hi" 'org-info)

    (t/declare-prefix "om" "Mobile"
                      "p" 'org-mobile-push
                      "P" 'org-mobile-pull)

    (t/declare-prefix "ol" "Links"
                      "s" 'org-store-link
                      "i" 'org-insert-link)

    (t/declare-prefix "ot" "Tags"
                      "a" 'org-archive-set-tag
                      "t" 'org-set-tags-command)

    (t/declare-prefix "oT" "Table"
                      "Tg" 'org-table-toggle-coordinate-overlays
                      "Tf" 'org-table-formula)

    (t/declare-prefix "oC" "Clock"
                      "r" 'org-clock-report
                      "i" 'org-clock-in
                      "o" 'org-clock-out)))

(defun t-org/config ()

  (t/after org

    (progn
      ;; fix https://emacs.stackexchange.com/questions/55690/org-babel-javascript-error
      (setq org-babel-js-function-wrapper
            "console.log(require('util').inspect(function(){\n%s\n}(), { depth: 100 }))"))

    (progn
      ;; fix completion dissapearing
      (t/after company
        (t/add-company-backends-hook 'org-mode-hook 'company-capf))
      (t/add-hook-defun 'org-mode-hook t/hook-add-pcomplete-to-capf
                        (t/add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t)))

    (progn
      ;; modules
      (setq org-modules '(org-tempo ; templates
                          org-mouse))
      (org-load-modules-maybe t))

    (progn
      ;; misc

      ;;(require 'ox-md)
      (require 'ox-gfm)
      (require 'ob-clojure)

      (setq org-babel-clojure-backend 'cider)

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (gnuplot . t)
         (clojure . t)
         (python . t)
         (ruby . t)
         (js . t)
         (latex . t)
         (shell . t)
         (dot . t)
         (restclient . t)
         (elasticsearch . t)))

      (t/add-hook 'org-babel-after-execute-hook 't/org-fix-inline-images)

      (t/add-hook-defun 'org-mode-hook t/hook-org
                        ;; bring back stolen smartparen keys
                        (t/bind-in '(evil-motion-state-local-map)
                          "M-<up>" 'org-metaup
                          "M-<down>" 'org-metadown
                          "M-S-<right>" 'org-shiftmetaright
                          "M-S-<left>" 'org-shiftmetaleft)
                        (evil-snipe-override-local-mode)
                        (org-display-inline-images t t)
                        (visual-line-mode 1)))

    (progn
      ;; agenda

      (defun t/org-skip-subtree-if-priority (priority)
        "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
        (let ((subtree-end (save-excursion (org-end-of-subtree t)))
              (pri-value (* 1000 (- org-lowest-priority priority)))
              (pri-current (org-get-priority (thing-at-point 'line t))))
          (if (= pri-value pri-current)
              subtree-end
            nil)))


      (defun t/org-agenda-todo-type (name)
        `((org-agenda-remove-tags t)
          (org-agenda-sorting-strategy '(tag-up priority-down))
          (org-agenda-todo-keyword-format "")
          (org-agenda-overriding-header ,name)))


      (defun t/org-agenda-pri-a (&rest tags)
        (string-join (-map (lambda (t) (format "%s+PRIORITY=\"A\"" t)) tags) "|"))

      (defun t/org-agenda-pri (header &rest tags)
        (list (apply 't/org-agenda-pri-a tags)
              `((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header ,header))))

      (defun t/org-agenda-day (tags)
        (list tags '((org-agenda-span 'day)
                     (org-agenda-ndays-to-span 1)
                     (org-agenda-time-grid nil))))

      (defun t/org-agenda-not-pri (header tags skip)
        (list tags `((org-agenda-overriding-header ,header)
                     (org-agenda-skip-function '(or (t/org-skip-subtree-if-priority ?A)
                                                    (org-agenda-skip-if nil (quote ,skip)))))))

      (defun t/org-agenda-todos (header tags)
        (t/org-agenda-not-pri header tags '(scheduled deadline)))

      (defun t/org-agenda-todos-scheduled (header tags)
        (t/org-agenda-not-pri header tags '(notscheduled deadline)))

      (defun t/org-day-summary (&rest tags)
        `((tags ,@(apply 't/org-agenda-pri (append (list "Pri") tags)))
          (agenda ,@(t/org-agenda-day (string-join tags "|")))
          (tags-todo ,@(t/org-agenda-todos "Todo" (string-join tags "|")))
          (tags-todo ,@(t/org-agenda-todos-scheduled "Scheduled todo" (string-join tags "|")))))

      (defun t/org-agenda-read ()
        '(tags-todo "book|read|twitter|pocket" ((org-agenda-overriding-header "Read"))))

      (setq org-agenda-include-diary t
            org-agenda-diary-file (t/org-directory "diary.org")
            org-agenda-default-appointment-duration nil
            org-agenda-window-setup 'current-window;;'only-window ; delete other windows when showing agenda
            org-agenda-restore-windows-after-quit t ; restore them again
            org-agenda-files (t/find-org-files-recursively org-directory "org$\\\|txt$") ; where to look for org files
            org-agenda-text-search-extra-files (t/find-org-files-recursively (t/user-file "Dropbox/org") "org_archive$")
            org-agenda-skip-scheduled-if-done nil ; prevent showing done scheduled items
            org-agenda-custom-commands `(("T" alltodo)
                                         ("C" todo "DONE" ,(t/org-agenda-todo-type "DONE"))
                                         ("t" todo "TODO" ,(t/org-agenda-todo-type "TODO"))
                                         ("b" todo "STARTED" ,(t/org-agenda-todo-type "STARTED"))
                                         ("c" todo "CANCELLED" ,(t/org-agenda-todo-type "CANCELLED"))
                                         ("m" tags-todo "serie|film")
                                         ("e" tags-todo "emacs")
                                         ("r" tags-todo "book|read|twitter|pocket")
                                         ("v" tags-todo "video")
                                         ("w" "work" ,(append (t/org-day-summary "+bekk-home" "+saga-home")
                                                              `((tags "+someday+saga")
                                                                (tags "+someday+bekk"))))
                                         ("h" "home" ,(append (list (t/org-agenda-read))
                                                              (t/org-day-summary "+home-emacs-someday")
                                                              `((tags-todo "+someday-work" ((org-agenda-overriding-header "Someday"))))))))

      )

    (progn
      ;; realign tags
      (defun t/org-mode-realign-all-tags ()
        "Code to realign tags, stolen from org.el"
        (save-excursion
          (goto-char (point-min))
          (while (re-search-forward org-outline-regexp-bol nil t)
            (org-set-tags (org-get-tags nil t))
            (org-set-tags (seq-remove (lambda (tag)
                                        (get-text-property 0 'inherited tag))
                                      (org-get-tags)))
            (end-of-line))))

      (t/add-hook-defun 'before-save-hook t/org-mode-before-save
                        (when (eq major-mode 'org-mode)
                          (t/org-mode-realign-all-tags)))

      (progn
        ;; reselect visual when moving multiple lines
        (setq t-org-move-tree-was-visual nil)
        (defun t/org-visual-restore ()
          (when t-org-move-tree-was-visual
            (evil-normal-state)
            (evil-visual-restore)
            (setq t-org-move-tree-was-visual nil)))
        (defadvice org-metaup   (before t/before-org-metaup activate) (setq t-org-move-tree-was-visual (region-active-p)))
        (defadvice org-metadown (before t/before-org-metadown activate) (setq t-org-move-tree-was-visual (region-active-p)))
        (defadvice org-metaup   (after t/after-org-metaup activate) (t/org-visual-restore))
        (defadvice org-metadown (after t/after-org-metadown activate) (t/org-visual-restore))))

    (progn
      ;; save org mode buffers after refile
      (defadvice
          org-refile
          (after t/after-org-refile activate)
        (org-save-all-org-buffers)))

    (progn
      ;; idle timer
      (defun t/jump-to-org-agenda ()
        (interactive)
        (let ((agenda-buffer (get-buffer "*Org Agenda*"))
              wind)
          (if (and (not (equal agenda-buffer (current-buffer)))
                   agenda-buffer)
              (if (setq wind (get-buffer-window agenda-buffer))
                  (select-window wind)
                (if (called-interactively-p)
                    (progn
                      (select-window (display-buffer agenda-buffer t t))
                      (org-fit-window-to-buffer))
                  (with-selected-window (display-buffer agenda-buffer)
                    (org-fit-window-to-buffer))))
            (call-interactively 'org-agenda-list))))

      (progn

        (defvar t-org-file-save-since-last-idle nil)
        ;; Hook to remember if org files are saved since last idle timer.
        (t/add-hook-defun 'before-save-hook t/org-mode-before-save-since-last-idle
                          (when (eq major-mode 'org-mode)
                            (setq t-org-file-save-since-last-idle t)))

        (defun t/org-idle-timer ()
          "Timer to run when idle for syncing org."
          (interactive)
          (when t-org-file-save-since-last-idle
            (message "Syncing agenda...")
            (org-save-all-org-buffers)
            (comment (t/org-export-calendars))
            (org-mobile-pull)
            (org-mobile-push)
            (setq t-org-file-save-since-last-idle nil)
            (message "Syncing agenda... done")))

        (defun t/org-export-calendars ()
          "Export given set of calendars to ical files, so you can subscribe to their dropbox links in ical.
Locally redefines org-agenda-files not to export all agenda files."
          (interactive)
          (let ((org-agenda-files (cons org-default-notes-file
                                        (mapcar #'t/org-directory
                                                '("home.org"
                                                  "bekk/bekk.org"
                                                  "bekk/saga.org"
                                                  "bekk/datainn.org")))))
            (org-icalendar-export-agenda-files)))

        (when (not is-ms)
          (t/idle-timer t-timers-sync-org-idle #'t/org-idle-timer 5)
          (t/idle-timer t-timers-sync-org-gcal 'org-gcal-fetch 30)))

      (when (boundp 'org-evil-table-mode-map)
        (t/bind-in 'org-evil-table-mode-map
          "M-S-<left>" 'org-table-delete-column
          "M-S-<right>" 'org-table-insert-column))

      (progn
        ;; blank line before new entries with text,
        ;; but not headings following other headings (todolists)

        (setq org-blank-before-new-entry
              '((heading . always)
                (plain-list-item . nil)))

        (defun t/call-rebinding-org-blank-behaviour (fn)
          (let ((org-blank-before-new-entry
                 (copy-tree org-blank-before-new-entry)))
            (when (org-at-heading-p)
              (rplacd (assoc 'heading org-blank-before-new-entry) nil))
            (call-interactively fn)))

        (defun t/org-meta-return-dwim ()
          (interactive)
          (if (looking-back "^")
              (call-interactively 'org-meta-return)
            (progn
              (evil-append-line 0)
              (t/call-rebinding-org-blank-behaviour 'org-meta-return))))

        (defun t/org-insert-todo-heading-dwim ()
          (interactive)
          (t/call-rebinding-org-blank-behaviour 'org-insert-todo-heading)
          (evil-cp-append 1))

        (defun t/org-insert-heading-respect-content-dwim ()
          (interactive)
          (t/call-rebinding-org-blank-behaviour 'org-insert-heading-respect-content)
          (evil-cp-append 1))

        (defun t/org-insert-todo-heading-respect-content-dwim ()
          (interactive)
          (t/call-rebinding-org-blank-behaviour 'org-insert-todo-heading-respect-content)
          (evil-cp-append 1))

        (t/add-hook-defun 'org-mode-hook t/hook-org-meta
                          (t/bind-in 'org-mode-map
                            "<return>" 'org-return
                            "C-w" 'org-refile
                            "M-<return>" 't/org-meta-return-dwim
                            "M-S-<return>" 't/org-insert-todo-heading-dwim
                            "C-<return>" 't/org-insert-heading-respect-content-dwim
                            "C-S-<return>" 't/org-insert-todo-heading-respect-content-dwim)))

      (progn
        ;; yas in org
        (defun yas/org-very-safe-expand ()
          (let ((yas/fallback-behavior 'return-nil)) (yas-expand)))

        (defun yas/org-setup ()
          (make-variable-buffer-local 'yas-trigger-key)
          (setq yas-trigger-key [tab])
          (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
          (define-key yas-keymap [tab] 'yas-next-field))

        ;; See https://github.com/eschulte/emacs24-starter-kit/issues/80.
        (setq org-src-tab-acts-natively nil)

        (t/add-hook 'org-mode-hook #'yas/org-setup)))

    (t/add-hook-defun 'org-mode-hook t/reset-org-font-sizes
                      (dolist (face '(org-level-1
                                      org-level-2
                                      org-level-3
                                      org-level-4
                                      org-level-5))
                        (set-face-attribute face nil :weight 'semi-bold :height 1.0)))
    (t/add-hook-defun 'org-mode-hook t/remove-org-mode-stars
                      (set-face-attribute 'org-hide nil :foreground (face-attribute 'default :background)) )))

(t/use-package ob-restclient)

(t/use-package org-alert
  :commands t/org-idle-timer
  :config
  (progn
    (setq alert-default-style 'osx-notifier
          org-alert-interval (* 1 60 60))
    (org-alert-enable)))

(t/use-package weather-metno
  :after org
  :config
  (progn
    (setq weather-metno-location-name "Trondheim, Norway"
          weather-metno-location-latitude lat-trh
          weather-metno-location-longitude lon-trh
          ;; Emacs 25 doesn't play nice with image magick 7?
          ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=25967
          ;; weather-metno-use-imagemagick t
          ;; weather-metno-get-image-props '(:width 20 :height 20 :ascent center)
          )))

(t/use-package org-mac-link
  :ensure org-plus-contrib
  :commands (org-mac-grab-link
             org-mac-chrome-get-frontmost-url))

(t/use-package calendar-norway
  :after calendar
  :config
  (progn
    (setq calendar-holidays
          (append calendar-norway-raude-dagar
                  calendar-norway-andre-merkedagar
                  calendar-norway-dst
                  '((holiday-fixed 3 17 "St. Patricksdag") ; extra non-no days
                    (holiday-fixed 10 31 "Hallowe'en")
                    (holiday-float 11 4 4 "Thanksgiving")
                    (solar-equinoxes-solstices)))
          calendar-day-name-array ["Søndag" "Mandag" "Tirsdag" "Onsdag" "Torsdag" "Fredag" "Lørdag"]
          solar-n-hemi-seasons '("Vårjevndøgn" "Sommersolverv" "Høstjevndøgn" "Vintersolherv"))

    (setq calendar-latitude lat-trh
          calendar-longitude lon-trh
          calendar-location-name "Trondheim, Norway")

    (progn
      ;; moons in agenda
      (with-no-warnings (defvar date))
      (defun t/org-lunar-phases ()
        "Show lunar phase in Agenda buffer."
        (require 'lunar)
        (let* ((phase-list (lunar-phase-list (nth 0 date) (nth 2 date)))
               (phase (cl-find-if (lambda (phase) (equal (car phase) date))
                                  phase-list)))
          (when phase
            (setq ret (concat (lunar-phase-name (nth 2 phase)) " "
                              (substring (nth 1 phase) 0 5))))))

      (defadvice lunar-phase-name (around sv-lunar-phase-name activate)
        "Månefasenavn på norsk."
        (setq ad-return-value
              (let ((phase (ad-get-arg 0)))
                (cond ((= 0 phase) "Nymåne ●")
                      ((= 1 phase) "Månen i ny ☽")
                      ((= 2 phase) "Fullmåne ○")
                      ((= 3 phase) "Månen i ne ☾"))))))))

(t/use-package spray
  :commands spray-mode
  :init
  (progn
    (setq spray-wpm 680
          spray-height 170
          spray-margin-top 0
          spray-margin-left 0)
    (t/declare-prefix "t" "Toggle"
                      "s" (t/micro-state-in-mode
                           'spray-mode
                           "s" 'spray-slower
                           "f" 'spray-faster
                           "SPC" 'spray-start/stop
                           "<left>" 'spray-backward-word
                           "<right>" 'spray-forward-word))
    (t/add-hook-defun 'spray-mode-hook t/hook-spray
                      (setq-local spray-margin-top (truncate (/ (window-height) 2.7)))
                      (setq-local spray-margin-left (truncate (/ (window-width) 2.7)))
                      (beacon-mode -1)
                      (t/locally-disable-cursor)
                      (set-face-foreground 'spray-accent-face
                                           (face-foreground 'font-lock-keyword-face)))))

(t/use-package twittering-mode
  :commands twittering-mode
  :init
  (progn
    (setq twittering-request-confirmation-on-posting t)
    (t/declare-prefix "a" "Applications"
                      "t" 'twittering-mode)))

(t/use-package elfeed
  :commands (elfeed)
  :init
  (progn
    (setq elfeed-db-directory (t/user-file "/Dropbox/Apps/elfeed/db")
          elfeed-search-filter "@6-months-ago -old -gaming -news -life +unread -photo")
    (defun t/elfeed-show-hide-images ()
      (interactive)
      (let ((shr-inhibit-images t))
        (elfeed-show-refresh)))
    (t/declare-prefix "a" "Applications"
                      "r" 'elfeed)
    (t/declare-prefix-for-mode 'elfeed-show-mode
                               "t" "Toggle"
                               "i" 't/elfeed-show-hide-images))
  :config
  (progn
    (evil-set-initial-state 'elfeed-search-mode 'normal)
    (evil-set-initial-state 'elfeed-show-mode 'normal)
    (evil-define-key '(normal motion) elfeed-search-mode-map
      (kbd "<return>") 'elfeed-search-show-entry
      "q" 'quit-window
      "u" 'elfeed-search-tag-all-unread
      "G" 'elfeed-search-fetch
      "r" 'elfeed-search-untag-all-unread
      "s" 'elfeed-search-live-filter ; filter
      "p" 'elfeed-goodies/split-show-prev
      "n" 'elfeed-goodies/split-show-next
      "y" 'elfeed-search-yank)
    (evil-define-key 'normal elfeed-show-mode-map
      "d" 'scroll-up-command
      "u" 'scroll-down-command
      "q" 'elfeed-goodies/delete-pane
      "b" 'elfeed-show-visit)
    (t/add-hook-defun 'elfeed-show-mode-hook t/elfeed-show-mode-hook
                      (let ((map (make-sparse-keymap)))
                        (bind-key "n" (lambda ()
                                        (interactive)
                                        (condition-case nil
                                            (scroll-up-command)
                                          (error (elfeed-goodies/split-show-next)))) map)
                        (bind-key "p" (lambda ()
                                        (interactive)
                                        (condition-case nil
                                            (scroll-down-command)
                                          (error (elfeed-goodies/split-show-prev)))) map)
                        (set-temporary-overlay-map map t
                                                   ;; (lambda () (equal major-mode 'elfeed-show-mode))
                                                   ))
                      (writeroom-mode 1)
                      (visual-line-mode))))

(t/use-package elfeed-goodies
  :commands elfeed-goodies/setup
  :init
  (progn (setq elfeed-goodies/entry-pane-position 'bottom)
         (add-hook 'elfeed-search-mode-hook 'elfeed-goodies/setup)))

(t/use-package elfeed-org
  :commands elfeed-org
  :init
  (progn
    (add-hook 'elfeed-search-mode-hook 'elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Dropbox/org/feeds.org"))))

(t/use-package org-gcal
  :ensure nil
  :load-path "site-lisp/org-gcal/"
  :commands (org-gcal-sync org-gcal-fetch)
  :init
  (progn
    (when (boundp 't-org-gcal)
      (setq org-gcal-client-id t-org-gcal-client-id
            org-gcal-client-secret t-org-gcal-client-secret
            org-gcal-fetch-file-alist t-org-gcal-file-alist
            org-gcal-header-alist t-org-gcal-header-alist
            org-gcal-up-days 1)
      ;;(add-hook 'org-agenda-mode-hook 'org-gcal-fetch)
      )))

(t/use-package gnuplot
  :after org)

(t/use-package helm-org-rifle
  :after org
  :commands (helm-org-rifle)
  :init
  (progn
    (setq helm-org-rifle-directories-filename-regexp "\.org\\(_archive\\)?$")
    (t/declare-prefix-for-mode 'org-mode "s" "Search"
                               "p" 'helm-org-rifle
                               "P" 'helm-projectile-ag)))

;; smartparens helpers
(t/after smartparens
  (sp-with-modes 'org-mode
    (sp-local-pair "*" "*" :actions '(insert wrap) :unless '(sp-point-after-word-p sp-point-at-bol-p) :wrap "C-*" :skip-match 'sp--org-skip-asterisk)
    (sp-local-pair "~" "~" :unless '(sp-point-after-word-p) :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "<" ">" :unless '(sp-point-after-word-p) :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "=" "=" :unless '(sp-point-after-word-p) :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "«" "»")))

;;; ORG-MODE:  * My Task
;;;              SCHEDULED: <%%(diary-last-day-of-month date)>
;;; DIARY:  %%(diary-last-day-of-month date) Last Day of the Month
;;; See also:  (setq org-agenda-include-diary t)
;;; (diary-last-day-of-month '(2 28 2017))
(defun t/diary-last-day-of-month (date)
  "Return `t` if DATE is the last day of the month."
  (let* ((day (calendar-extract-day date))
         (month (calendar-extract-month date))
         (year (calendar-extract-year date))
         (last-day-of-month
          (calendar-last-day-of-month month year)))
    (= day last-day-of-month)))

(defun t/diary-last-day-of-week (date)
  "Return `t` if DATE is the last day of the week."
  (equal 5
         (let* ((day (calendar-extract-day date))
                (month (calendar-extract-month date))
                (year (calendar-extract-year date)))
           (org-day-of-week day month year))))

(bind-key "\C-c\C-c" 'org-edit-src-exit 'org-src-mode-map)
#+END_SRC
** themes

#+BEGIN_SRC emacs-lisp :results silent
(use-package doom-themes
  :config
  (progn
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    ;;(t/add-hook 'org-mode-hook 'doom-themes-org-config)
    ;;(t/add-hook 'neotree-mode-hook 'doom-themes-neotree-config)
    (doom-themes-visual-bell-config)))

(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  (progn
    ;;(t/add-hook-setq 'js2-mode-hook doom-modeline-env-command "node -v 2>&1")
    (setq doom-modeline-height 40
          doom-themes-padded-modeline 1)))

(defconst t-themes (list
                    'doom-one
                    'doom-one-light) "Themes to cycle")

(defun t/cycle-theme ()
  "Cycles themes in `t-themes'"
  (interactive)
  (let ((first (car t-themes))
        (rest (cdr t-themes)))
    (setq t-themes (append rest (list first)))
    (car t-themes)))

(defun t/load-theme-cycle ()
  "Cycles `t-themes' and loads first theme in list"
  (interactive)
  (t/switch-theme (t/cycle-theme)))

(defun t/load-theme ()
  "Loads theme and fixes fringe bg color"
  (interactive)
  (t/switch-theme (car t-themes)))

(defun t/reset-font-after-load (&rest args) (interactive) (t/reset-font-size))
(advice-add 'load-theme :after 't/reset-font-after-load)

(defvar *t-theme-did-load* nil)
(defun t/load-theme-once ()
  (unless *t-theme-did-load*
    (setq *t-theme-did-load* t)
    (t/load-theme)))

(t/add-hook 'after-init-hook
            (lambda ()
              (if has-gui
                  (t/load-theme)
                (progn
                  ;; load-theme after making the frame also when in terminal emacs
                  (when (daemonp)
                    (add-hook 'after-make-frame-functions
                              (lambda (frame)
                                (with-selected-frame frame (t/load-theme-once))
                                ;; for some reason opening in terminal gives menu bar
                                (menu-bar-mode -1))))
                  (advice-add server-create-window-system-frame :after 't/load-theme-once)))))
#+END_SRC

** after
#+BEGIN_SRC emacs-lisp :results silent
(t/timing-end)
#+END_SRC
